import { Telegraf, Context } from 'telegraf';
import { Database } from './database/database';
import { WeatherService } from './services/weatherService';
import { MagneticService } from './services/magneticService';
import * as cron from 'node-cron';

export class MoodTrackerBot {
  private bot: Telegraf;
  private db: Database;
  private weatherService: WeatherService;
  private magneticService: MagneticService;
  private awaitingRating: Set<number> = new Set(); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

  constructor(token: string, databasePath: string) {
    this.bot = new Telegraf(token);
    this.db = new Database(databasePath);
    this.weatherService = new WeatherService();
    this.magneticService = new MagneticService();
    
    this.setupCommands();
    this.setupScheduler();
  }

  private setupCommands(): void {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx: Context) => {
      const user = ctx.from;
      if (!user) return;

      try {
        await this.db.addUser(user.id, user.username, user.first_name);
        
        await ctx.reply(
          `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã\n\n` +
          `–≠—Ç–æ –±–æ—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.\n\n` +
          `–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /init\n\n` +
          `–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –≤–∞—Å, –∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10. ` +
          `–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è! üìà`
        );
      } catch (error) {
        console.error('Error in /start command:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /init - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    this.bot.command('init', async (ctx: Context) => {
      const user = ctx.from;
      if (!user) return;

      try {
        await this.db.addUser(user.id, user.username, user.first_name);
        
        await ctx.reply(
          `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—Ä–µ–∫–∏–Ω–≥–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n\n` +
          `üïê –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n` +
          `üìä –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n` +
          `‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ\n` +
          `‚Ä¢ –ó–∞–º–µ—á–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n` +
          `‚Ä¢ –õ—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è\n\n` +
          `–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏:\n` +
          `1 - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ\n` +
          `10 - –æ—Ç–ª–∏—á–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ\n\n` +
          `üéØ –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 23:00 –¥–ª—è –ø–µ—Ä–≤–æ–π –æ—Ü–µ–Ω–∫–∏!`
        );
      } catch (error) {
        console.error('Error in /init command:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });


    // –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å
    this.bot.command('help', async (ctx: Context) => {
      const helpMessage = 
        `ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
        `üìã –û—Å–Ω–æ–≤–Ω—ã–µ:\n` +
        `/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n` +
        `/init - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n` +
        `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
        `üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n` +
        `1. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n` +
        `2. –ù–∞–ø–∏—à–∏—Ç–µ /init –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n` +
        `3. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 –¥–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n` +
        `4. –ü–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ü–µ–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç 1 –¥–æ 10\n\n` +
        `üìà –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è ` +
        `–∏ –∑–∞–º–µ—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –≤–∞—à–µ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏!`;
      
      await ctx.reply(helpMessage);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫
    this.bot.on('text', async (ctx: Context) => {
      const user = ctx.from;
      const text = ctx.text;
      
      if (!user || !text) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10
      const rating = parseInt(text);
      if (isNaN(rating) || rating < 1 || rating > 10) {
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ü–µ–Ω–∫–∞
      if (!this.awaitingRating.has(user.id)) {
        await ctx.reply(
          '‚è∞ –û—Ü–µ–Ω–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 23:00.\n\n' +
          '–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è!'
        );
        return;
      }

      try {
        await ctx.reply('üîÑ –°–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à—É –æ—Ü–µ–Ω–∫—É...');
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        const [weatherHistory, magneticData] = await Promise.all([
          this.weatherService.getHistoricalWeather(4), // –°–µ–≥–æ–¥–Ω—è + 3 –¥–Ω—è –Ω–∞–∑–∞–¥
          this.magneticService.getMagneticStormData()
        ]);

        const weatherChanges = this.weatherService.calculateWeatherChanges(weatherHistory);
        const today = new Date().toISOString().split('T')[0];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await this.db.saveDailyRecord(user.id, today, rating, {
          tempChange1d: weatherChanges.tempChange1d,
          tempChange2d: weatherChanges.tempChange2d,
          tempChange3d: weatherChanges.tempChange3d,
          pressureChange1d: weatherChanges.pressureChange1d,
          pressureChange2d: weatherChanges.pressureChange2d,
          pressureChange3d: weatherChanges.pressureChange3d,
          magneticStormIndex: magneticData.kIndex
        });

        const responseMessage = 
          `‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ (${rating}/10) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\n` +
          `üìà –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - ` +
          `—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è!`;

        await ctx.reply(responseMessage);
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ü–µ–Ω–∫—É
        this.awaitingRating.delete(user.id);
      } catch (error) {
        console.error('Error saving mood rating:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err: any, ctx: Context) => {
      console.error('Bot error:', err);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.').catch(console.error);
    });
  }

  private setupScheduler(): void {
    // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
    cron.schedule('0 23 * * *', async () => {
      console.log('Sending daily mood reminders...');
      await this.sendDailyReminders();
    }, {
      timezone: 'Europe/Moscow'
    });

    console.log('Scheduler set up for daily reminders at 23:00 MSK');
  }

  private async sendDailyReminders(): Promise<void> {
    try {
      const activeUsers = await this.db.getActiveUsers();
      console.log(`Sending reminders to ${activeUsers.length} users`);

      for (const user of activeUsers) {
        try {
          await this.bot.telegram.sendMessage(
            user.telegram_id,
            `üåô –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è!\n\n` +
            `–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?\n` +
            `–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç 1 –¥–æ 10:\n\n` +
            `1 - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ üòû\n` +
            `5 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ üòê\n` +
            `10 - –æ—Ç–ª–∏—á–Ω–æ üòä\n\n` +
            `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —á–∏—Å–ª–æ!`
          );
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ü–µ–Ω–∫—É
          this.awaitingRating.add(user.telegram_id);
        } catch (error) {
          console.error(`Failed to send reminder to user ${user.telegram_id}:`, error);
        }
      }
    } catch (error) {
      console.error('Error sending daily reminders:', error);
    }
  }

  start(): void {
    this.bot.launch().then(() => {
      console.log('Bot started successfully!');
    }).catch((error) => {
      console.error('Failed to start bot:', error);
    });

    // Graceful shutdown
    process.once('SIGINT', () => this.stop());
    process.once('SIGTERM', () => this.stop());
  }

  stop(): void {
    console.log('Stopping bot...');
    this.bot.stop();
    this.db.close();
  }
}